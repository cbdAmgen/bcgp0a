<<<<<<< HEAD
priors <- createPriors(xTrain, noise = TRUE)
inits <- createInits(xTrain, priors, chains = 1)
chains <- 1
fit <- bcgp(x = xTrain, y = yTrain, priors = priors,
inits = inits, numUpdates = 3, numAdapt = 1000,
burnin = 1000, nmcmc = 5000, chains <- 1, cores = 1,
noise = TRUE)
lapply(fit@sim$samples[[1]], mean)
plot(xTrain, colMeans(fit@sim$samples[[1]]$V), type = 'l')
priors
rm(list = ls())
cat("\014")
DSin <- function(x){
=======
installed.packages()
.libPaths()
help(".libPaths")
packrat::status()
.libPaths(""/Users/caseyDavis/bcgpPackages/bcgp0a/packrat/lib-R/x86_64-apple-darwin15.6.0/3.5.1"")
.libPaths("/Users/caseyDavis/bcgpPackages/bcgp0a/packrat/lib-R/x86_64-apple-darwin15.6.0/3.5.1")
.libPaths()
.libPaths(c("/Users/caseyDavis/bcgpPackages/bcgp0a/packrat/lib/x86_64-apple-darwin15.6.0/3.5.1","/Users/caseyDavis/bcgpPackages/bcgp0a/packrat/lib-ext/x86_64-apple-darwin15.6.0/3.5.1","/Users/caseyDavis/bcgpPackages/bcgp0a/packrat/lib-R/x86_64-apple-darwin15.6.0/3.5.1"))
.libPaths()
search()
installed.packages()
installed.packages()[,1]
length(installed.packages()[,1])
install.packages("devtools")
install.packages("roxygen2")
installed.packages()[,1]
.libPaths()
library(bcgp0a)
library(bcgp0a)
devtools::document()
devtools::document()
devtools::document()
help(bcgp0a)
library(bcgp0a)
devtools::document()
devtools::document()
devtools::document()
help(roxygenise)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::use_build_ignore(c("examples"))
devtools::document()
help(bcgp0a)
help(bcgp)
rm(list = ls())
cat("\014")
BJX <- function(x){
if(!is.matrix(x)){
stop("x should be a matrix.")
}
if(dim(x)[2] != 1){
stop("x must have exactly one column.")
}
y <- sin(30*(x - .9)^4)*cos(2*(x - .9)) + (x - .9)/2
return(y)
}
xTrain <- matrix(c(seq(0, .4 + .4/11, by = .4/11), seq(0.5, 1, by = 0.5/3)), ncol = 1)
yTrain <- BJX(xTrain)
xPred <- matrix(c(xTrain, seq(min(xTrain), max(xTrain), 0.005)), ncol = 1)
priors <- createPriors(xTrain)
inits <- createInits(xTrain, priors)
plot(xTrain, yTrain)
lines(xPred, BJX(xPred), type = 'l')
xPred <- matrix(sort(c(xTrain, seq(min(xTrain), max(xTrain), 0.005))), ncol = 1)
priors <- createPriors(xTrain)
inits <- createInits(xTrain, priors)
plot(xTrain, yTrain)
lines(xPred, BJX(xPred), type = 'l')
help(bcgp)
help(bcgpMCMC)
help(createPriors)
library(bcgp0a)
help("createPriors")
help("bcgp")
library(bcgp0a)
help("createPriors")
help("createInits")
library(bcgp0a)
library(bcgp0a)
help(createPriors)
help(createInits)
rm(list = ls())
cat("\014")
BJX <- function(x){
if(!is.matrix(x)){
stop("x should be a matrix.")
}
if(dim(x)[2] != 1){
stop("x must have exactly one column.")
}
y <- sin(30*(x - .9)^4)*cos(2*(x - .9)) + (x - .9)/2
return(y)
}
xTrain <- matrix(c(seq(0, .4 + .4/11, by = .4/11), seq(0.5, 1, by = 0.5/3)), ncol = 1)
yTrain <- BJX(xTrain)
xPred <- matrix(sort(c(xTrain, seq(min(xTrain), max(xTrain), 0.005))), ncol = 1)
priors <- createPriors(xTrain)
inits <- createInits(xTrain, priors, chains = 1)
priors
inits
inits <- createInits(xTrain, priors, chains = 1)
inits
inits <- createInits(xTrain, priors, chains = 1)
inits
inits <- createInits(xTrain, priors, chains = 1); inits
inits <- createInits(xTrain, priors, chains = 1); inits
inits <- createInits(xTrain, priors, chains = 1); inits
inits <- createInits(xTrain, priors, chains = 1); inits
inits <- createInits(xTrain, priors, chains = 1); inits
inits <- createInits(xTrain, priors, chains = 1); inits
inits <- createInits(xTrain, priors, chains = 1); inits
inits <- createInits(xTrain, priors, chains = 1); inits
inits <- createInits(xTrain, priors, chains = 1); inits
inits <- createInits(xTrain, priors, chains = 1); inits
inits <- createInits(xTrain, priors, chains = 1); inits
inits <- createInits(xTrain, priors, chains = 1); inits
inits <- createInits(xTrain, priors, chains = 1); inits
inits <- createInits(xTrain, priors, chains = 1); inits
help(rescale)
y <- scale(rnorm(100, 0, 10), center = TRUE, scale = TRUE)
attributes(y)
y
help("scale")
scale
y <- rnorm(100, 0, 10); yScaled <- scale(y, center = TRUE, scale = TRUE)
mean(y)
sd(y)
mean(yScaled)
sd(yScaled)
attributes(yScaled)
x <- matrix(runif(40, -10, 10), ncol = 4, nrow = 10)
x
minx <- apply(x, 2, min)
maxx <- apply(x, 2, max)
minx
maxx
max(x)
(x - minx)/(maxx - minx)
x
minx
x <- matrix(runif(20, 0, 10), nrow = 10, ncol = 2)
y <- x[, 1] + sin(x[, 2])
priors <- createPriors(noise = FALSE, d = 2)
priors <- createPriors(x, noise = FALSE)
y
scale(y, center = TRUE, scale = TRUE)
yScaled <- scale(y, center = TRUE, scale = TRUE)
xScaled <- apply(x, 2, rescale)
library(bcgp0a)
library(help="bcgp0a" )
x
xScaled
y
yScaled
attributes(yScaled)
attributes(yScaled)$`scaled:center`
help(apply)
x
rescale(x[, 1])
library(help="bcgp0a" )
library(bcgp0a)
rm(list = ls())
cat("\014")
BJX <- function(x){
>>>>>>> 2abea064fa233b64ec3cd65e96c6826570a7ba93
if(!is.matrix(x)){
stop("x should be a matrix.")
}
if(dim(x)[2] != 1){
stop("x must have exactly one column.")
}
<<<<<<< HEAD
y <- exp(-2*x) * sin(4*pi*x^2)
return(y)
}
xTrain <- matrix(seq(0, 3, length.out = 15), ncol = 1)
yTrain <- DSin(xTrain) + rnorm(length(xTrain), 0, 0.02)
xPred <- matrix(sort(c(xTrain, seq(min(xTrain), max(xTrain), 0.005))), ncol = 1)
priors <- createPriors(xTrain, noise = TRUE)
inits <- createInits(xTrain, priors, chains = 1)
chains <- 1
fit <- bcgp(x = xTrain, y = yTrain, priors = priors,
inits = inits, numUpdates = 3, numAdapt = 1000,
burnin = 1000, nmcmc = 5000, chains <- 1, cores = 1,
noise = TRUE)
lapply(fit@sim$samples[[1]], mean)
plot(xTrain, colMeans(fit@sim$samples[[1]]$V), type = 'l')
library(bcgp0a)
rm(list = ls())
cat("\014")
DSin <- function(x){
=======
y <- sin(30*(x - .9)^4)*cos(2*(x - .9)) + (x - .9)/2
return(y)
}
xTrain <- matrix(c(seq(0, .4 + .4/11, by = .4/11), seq(0.5, 1, by = 0.5/3)), ncol = 1)
yTrain <- BJX(xTrain)
xPred <- matrix(sort(c(xTrain, seq(min(xTrain), max(xTrain), 0.005))), ncol = 1)
priors <- createPriors(xTrain, noise = FALSE)
inits <- createInits(xTrain, priors, chains = 1)
bcgp(x = xTrain, y = yTrain, priors = priors,
inits = inits, numUpdates = 3, numAdapt = 1000,
burnin = 1000, nmcmc = 5000, chains = 1, cores = 1,
noise = FALSE)
library(bcgp0a)
rm(list = ls())
cat("\014")
BJX <- function(x){
>>>>>>> 2abea064fa233b64ec3cd65e96c6826570a7ba93
if(!is.matrix(x)){
stop("x should be a matrix.")
}
if(dim(x)[2] != 1){
stop("x must have exactly one column.")
}
<<<<<<< HEAD
y <- exp(-2*x) * sin(4*pi*x^2)
return(y)
}
xTrain <- matrix(seq(0, 3, length.out = 15), ncol = 1)
yTrain <- DSin(xTrain) + rnorm(length(xTrain), 0, 0.02)
xPred <- matrix(sort(c(xTrain, seq(min(xTrain), max(xTrain), 0.005))), ncol = 1)
noise <- FALSE
priors <- createPriors(xTrain, noise = noise)
inits <- createInits(xTrain, priors, chains = 1)
chains <- 1
fit <- bcgp(x = xTrain, y = yTrain, priors = priors,
inits = inits, numUpdates = 3, numAdapt = 1000,
burnin = 1000, nmcmc = 5000, chains <- 1, cores = 1,
noise = noise)
lapply(fit@sim$samples[[1]], mean)
plot(xTrain, colMeans(fit@sim$samples[[1]]$V), type = 'l')
plot(fit@sim$samples[[1]]$sig2V)
lapply(fit@sim$acceptances[[1]], mean)
rm(list = ls())
cat("\014")
n <- 15
beta0 <- 0
w <- 0.65
rhoG <- 0.6
rhoL <- 0.3
sig2eps <- 0
muV <- -0.1
sig2V <- 0.01
rhoV <- 0.99
xTrain <- matrix(seq(0, 1, length.out = n), ncol = 1)
G <- getCorMat(xTrain, rhoG)
L <- getCorMat(xTrain, rhoL)
R <- combineCorMats(w, G, L)
K <- sig2V*getCorMat(xTrain, rhoV) + diag(1e-10, length(xTrain))
# V <- exp(MASS::mvrnorm(1, rep(muV, length(xTrain)), K))
V <- rep(1, length(xTrain))
C <- getCovMat(V, R, sig2eps)
yTrain <- MASS::mvrnorm(1, rep(beta0, length(xTrain)), C)
plot(xTrain, yTrain, type = 'l')
chains <- 1
rm(list = ls())
cat("\014")
n <- 15
beta0 <- 0
w <- 0.65
rhoG <- 0.6
rhoL <- 0.3
sig2eps <- 0
muV <- -0.1
sig2V <- 0.01
rhoV <- 0.99
xTrain <- matrix(seq(0, 1, length.out = n), ncol = 1)
G <- getCorMat(xTrain, rhoG)
L <- getCorMat(xTrain, rhoL)
R <- combineCorMats(w, G, L)
K <- sig2V*getCorMat(xTrain, rhoV) + diag(1e-10, length(xTrain))
# V <- exp(MASS::mvrnorm(1, rep(muV, length(xTrain)), K))
V <- rep(1, length(xTrain))
C <- getCovMat(V, R, sig2eps)
yTrain <- MASS::mvrnorm(1, rep(beta0, length(xTrain)), C)
plot(xTrain, yTrain, type = 'l')
chains <- 1
rm(list = ls())
cat("\014")
n <- 15
beta0 <- 0
w <- 0.65
rhoG <- 0.6
rhoL <- 0.3
sig2eps <- 0
muV <- -0.1
sig2V <- 0.01
rhoV <- 0.99
xTrain <- matrix(seq(0, 1, length.out = n), ncol = 1)
G <- getCorMat(xTrain, rhoG)
L <- getCorMat(xTrain, rhoL)
R <- combineCorMats(w, G, L)
K <- sig2V*getCorMat(xTrain, rhoV) + diag(1e-10, length(xTrain))
# V <- exp(MASS::mvrnorm(1, rep(muV, length(xTrain)), K))
V <- rep(1, length(xTrain))
C <- getCovMat(V, R, sig2eps)
yTrain <- MASS::mvrnorm(1, rep(beta0, length(xTrain)), C)
plot(xTrain, yTrain, type = 'l')
chains <- 1
rm(list = ls())
cat("\014")
n <- 15
beta0 <- 0
w <- 0.65
rhoG <- 0.6
rhoL <- 0.3
sig2eps <- 0
muV <- -0.1
sig2V <- 0.01
rhoV <- 0.99
xTrain <- matrix(seq(0, 1, length.out = n), ncol = 1)
G <- getCorMat(xTrain, rhoG)
L <- getCorMat(xTrain, rhoL)
R <- combineCorMats(w, G, L)
K <- sig2V*getCorMat(xTrain, rhoV) + diag(1e-10, length(xTrain))
# V <- exp(MASS::mvrnorm(1, rep(muV, length(xTrain)), K))
V <- rep(1, length(xTrain))
C <- getCovMat(V, R, sig2eps)
yTrain <- MASS::mvrnorm(1, rep(beta0, length(xTrain)), C)
plot(xTrain, yTrain, type = 'l')
chains <- 1
rm(list = ls())
cat("\014")
n <- 15
beta0 <- 0
w <- 0.65
rhoG <- 0.6
rhoL <- 0.3
sig2eps <- 0
muV <- -0.1
sig2V <- 0.01
rhoV <- 0.99
xTrain <- matrix(seq(0, 1, length.out = n), ncol = 1)
G <- getCorMat(xTrain, rhoG)
L <- getCorMat(xTrain, rhoL)
R <- combineCorMats(w, G, L)
K <- sig2V*getCorMat(xTrain, rhoV) + diag(1e-10, length(xTrain))
# V <- exp(MASS::mvrnorm(1, rep(muV, length(xTrain)), K))
V <- rep(1, length(xTrain))
C <- getCovMat(V, R, sig2eps)
yTrain <- MASS::mvrnorm(1, rep(beta0, length(xTrain)), C)
plot(xTrain, yTrain, type = 'l')
chains <- 1
rm(list = ls())
cat("\014")
n <- 15
beta0 <- 0
w <- 0.65
rhoG <- 0.6
rhoL <- 0.3
sig2eps <- 0
muV <- -0.1
sig2V <- 0.01
rhoV <- 0.99
xTrain <- matrix(seq(0, 1, length.out = n), ncol = 1)
G <- getCorMat(xTrain, rhoG)
L <- getCorMat(xTrain, rhoL)
R <- combineCorMats(w, G, L)
K <- sig2V*getCorMat(xTrain, rhoV) + diag(1e-10, length(xTrain))
# V <- exp(MASS::mvrnorm(1, rep(muV, length(xTrain)), K))
V <- rep(1, length(xTrain))
C <- getCovMat(V, R, sig2eps)
yTrain <- MASS::mvrnorm(1, rep(beta0, length(xTrain)), C)
plot(xTrain, yTrain, type = 'l')
chains <- 1
rm(list = ls())
cat("\014")
n <- 15
beta0 <- 0
w <- 0.65
rhoG <- 0.6
rhoL <- 0.3
sig2eps <- 0
muV <- -0.1
sig2V <- 0.01
rhoV <- 0.99
xTrain <- matrix(seq(0, 1, length.out = n), ncol = 1)
G <- getCorMat(xTrain, rhoG)
L <- getCorMat(xTrain, rhoL)
R <- combineCorMats(w, G, L)
K <- sig2V*getCorMat(xTrain, rhoV) + diag(1e-10, length(xTrain))
# V <- exp(MASS::mvrnorm(1, rep(muV, length(xTrain)), K))
V <- rep(1, length(xTrain))
C <- getCovMat(V, R, sig2eps)
yTrain <- MASS::mvrnorm(1, rep(beta0, length(xTrain)), C)
plot(xTrain, yTrain, type = 'l')
chains <- 1
rm(list = ls())
cat("\014")
n <- 15
beta0 <- 0
w <- 0.65
rhoG <- 0.6
rhoL <- 0.3
sig2eps <- 0
muV <- -0.1
sig2V <- 0.01
rhoV <- 0.99
xTrain <- matrix(seq(0, 1, length.out = n), ncol = 1)
G <- getCorMat(xTrain, rhoG)
L <- getCorMat(xTrain, rhoL)
R <- combineCorMats(w, G, L)
K <- sig2V*getCorMat(xTrain, rhoV) + diag(1e-10, length(xTrain))
# V <- exp(MASS::mvrnorm(1, rep(muV, length(xTrain)), K))
V <- rep(1, length(xTrain))
C <- getCovMat(V, R, sig2eps)
yTrain <- MASS::mvrnorm(1, rep(beta0, length(xTrain)), C)
plot(xTrain, yTrain, type = 'l')
chains <- 1
rm(list = ls())
cat("\014")
n <- 15
beta0 <- 0
w <- 0.65
rhoG <- 0.6
rhoL <- 0.3
sig2eps <- 0
muV <- -0.1
sig2V <- 0.01
rhoV <- 0.99
xTrain <- matrix(seq(0, 1, length.out = n), ncol = 1)
G <- getCorMat(xTrain, rhoG)
L <- getCorMat(xTrain, rhoL)
R <- combineCorMats(w, G, L)
K <- sig2V*getCorMat(xTrain, rhoV) + diag(1e-10, length(xTrain))
# V <- exp(MASS::mvrnorm(1, rep(muV, length(xTrain)), K))
V <- rep(1, length(xTrain))
C <- getCovMat(V, R, sig2eps)
yTrain <- MASS::mvrnorm(1, rep(beta0, length(xTrain)), C)
plot(xTrain, yTrain, type = 'l')
chains <- 1
rm(list = ls())
cat("\014")
n <- 15
beta0 <- 0
w <- 0.65
rhoG <- 0.6
rhoL <- 0.3
sig2eps <- 0
muV <- -0.1
sig2V <- 0.01
rhoV <- 0.99
xTrain <- matrix(seq(0, 1, length.out = n), ncol = 1)
G <- getCorMat(xTrain, rhoG)
L <- getCorMat(xTrain, rhoL)
R <- combineCorMats(w, G, L)
K <- sig2V*getCorMat(xTrain, rhoV) + diag(1e-10, length(xTrain))
# V <- exp(MASS::mvrnorm(1, rep(muV, length(xTrain)), K))
V <- rep(1, length(xTrain))
C <- getCovMat(V, R, sig2eps)
yTrain <- MASS::mvrnorm(1, rep(beta0, length(xTrain)), C)
plot(xTrain, yTrain, type = 'l')
chains <- 1
rm(list = ls())
cat("\014")
n <- 15
beta0 <- 0
w <- 0.65
rhoG <- 0.6
rhoL <- 0.3
sig2eps <- 0
muV <- -0.1
sig2V <- 0.01
rhoV <- 0.99
xTrain <- matrix(seq(0, 1, length.out = n), ncol = 1)
G <- getCorMat(xTrain, rhoG)
L <- getCorMat(xTrain, rhoL)
R <- combineCorMats(w, G, L)
K <- sig2V*getCorMat(xTrain, rhoV) + diag(1e-10, length(xTrain))
# V <- exp(MASS::mvrnorm(1, rep(muV, length(xTrain)), K))
V <- rep(1, length(xTrain))
C <- getCovMat(V, R, sig2eps)
yTrain <- MASS::mvrnorm(1, rep(beta0, length(xTrain)), C)
plot(xTrain, yTrain, type = 'l')
chains <- 1
rm(list = ls())
cat("\014")
n <- 15
beta0 <- 0
w <- 0.65
rhoG <- 0.6
rhoL <- 0.3
sig2eps <- 0
muV <- -0.1
sig2V <- 0.01
rhoV <- 0.99
xTrain <- matrix(seq(0, 1, length.out = n), ncol = 1)
noise <- FALSE
G <- getCorMat(xTrain, rhoG)
L <- getCorMat(xTrain, rhoL)
R <- combineCorMats(w, G, L)
K <- sig2V*getCorMat(xTrain, rhoV) + diag(1e-10, length(xTrain))
# V <- exp(MASS::mvrnorm(1, rep(muV, length(xTrain)), K))
V <- rep(1, length(xTrain))
C <- getCovMat(V, R, sig2eps)
yTrain <- MASS::mvrnorm(1, rep(beta0, length(xTrain)), C)
plot(xTrain, yTrain, type = 'l')
chains <- 1
priors <- createPriors(xTrain, noise = noise)
inits <- createInits(xTrain, priors, chains = chains)
rm(list = ls())
cat("\014")
n <- 15
beta0 <- 0
w <- 0.65
rhoG <- 0.6
rhoL <- 0.3
sig2eps <- 0
muV <- -0.1
sig2V <- 0.01
rhoV <- 0.99
xTrain <- matrix(seq(0, 1, length.out = n), ncol = 1)
noise <- FALSE
G <- getCorMat(xTrain, rhoG)
L <- getCorMat(xTrain, rhoL)
R <- combineCorMats(w, G, L)
K <- sig2V*getCorMat(xTrain, rhoV) + diag(1e-10, length(xTrain))
# V <- exp(MASS::mvrnorm(1, rep(muV, length(xTrain)), K))
V <- rep(1, length(xTrain))
C <- getCovMat(V, R, sig2eps)
yTrain <- MASS::mvrnorm(1, rep(beta0, length(xTrain)), C)
plot(xTrain, yTrain, type = 'l')
chains <- 1
priors <- createPriors(xTrain, noise = noise)
inits <- createInits(xTrain, priors, chains = chains)
rm(list = ls())
cat("\014")
n <- 15
beta0 <- 0
w <- 0.65
rhoG <- 0.6
rhoL <- 0.3
sig2eps <- 0
muV <- -0.1
sig2V <- 0.01
rhoV <- 0.99
xTrain <- matrix(seq(0, 1, length.out = n), ncol = 1)
noise <- FALSE
G <- getCorMat(xTrain, rhoG)
L <- getCorMat(xTrain, rhoL)
R <- combineCorMats(w, G, L)
K <- sig2V*getCorMat(xTrain, rhoV) + diag(1e-10, length(xTrain))
# V <- exp(MASS::mvrnorm(1, rep(muV, length(xTrain)), K))
V <- rep(1, length(xTrain))
C <- getCovMat(V, R, sig2eps)
yTrain <- MASS::mvrnorm(1, rep(beta0, length(xTrain)), C)
plot(xTrain, yTrain, type = 'l')
chains <- 1
priors <- createPriors(xTrain, noise = noise)
inits <- createInits(xTrain, priors, chains = chains)
rm(list = ls())
cat("\014")
n <- 15
beta0 <- 0
w <- 0.65
rhoG <- 0.6
rhoL <- 0.3
sig2eps <- 0
muV <- -0.1
sig2V <- 0.01
rhoV <- 0.99
xTrain <- matrix(seq(0, 1, length.out = n), ncol = 1)
noise <- FALSE
G <- getCorMat(xTrain, rhoG)
L <- getCorMat(xTrain, rhoL)
R <- combineCorMats(w, G, L)
K <- sig2V*getCorMat(xTrain, rhoV) + diag(1e-10, length(xTrain))
# V <- exp(MASS::mvrnorm(1, rep(muV, length(xTrain)), K))
V <- rep(1, length(xTrain))
C <- getCovMat(V, R, sig2eps)
yTrain <- MASS::mvrnorm(1, rep(beta0, length(xTrain)), C)
plot(xTrain, yTrain, type = 'l')
chains <- 1
priors <- createPriors(xTrain, noise = noise)
inits <- createInits(xTrain, priors, chains = chains)
rm(list = ls())
cat("\014")
n <- 15
beta0 <- 0
w <- 0.65
rhoG <- 0.6
rhoL <- 0.3
sig2eps <- 0
muV <- -0.1
sig2V <- 0.01
rhoV <- 0.99
xTrain <- matrix(seq(0, 1, length.out = n), ncol = 1)
noise <- FALSE
G <- getCorMat(xTrain, rhoG)
L <- getCorMat(xTrain, rhoL)
R <- combineCorMats(w, G, L)
K <- sig2V*getCorMat(xTrain, rhoV) + diag(1e-10, length(xTrain))
# V <- exp(MASS::mvrnorm(1, rep(muV, length(xTrain)), K))
V <- rep(1, length(xTrain))
C <- getCovMat(V, R, sig2eps)
yTrain <- MASS::mvrnorm(1, rep(beta0, length(xTrain)), C)
plot(xTrain, yTrain, type = 'l')
chains <- 1
priors <- createPriors(xTrain, noise = noise)
inits <- createInits(xTrain, priors, chains = chains)
rm(list = ls())
cat("\014")
n <- 15
beta0 <- 0
w <- 0.65
rhoG <- 0.6
rhoL <- 0.3
sig2eps <- 0
muV <- -0.1
sig2V <- 0.01
rhoV <- 0.99
xTrain <- matrix(seq(0, 1, length.out = n), ncol = 1)
noise <- FALSE
G <- getCorMat(xTrain, rhoG)
L <- getCorMat(xTrain, rhoL)
R <- combineCorMats(w, G, L)
K <- sig2V*getCorMat(xTrain, rhoV) + diag(1e-10, length(xTrain))
# V <- exp(MASS::mvrnorm(1, rep(muV, length(xTrain)), K))
V <- rep(1, length(xTrain))
C <- getCovMat(V, R, sig2eps)
yTrain <- MASS::mvrnorm(1, rep(beta0, length(xTrain)), C)
plot(xTrain, yTrain, type = 'l')
chains <- 1
priors <- createPriors(xTrain, noise = noise)
inits <- createInits(xTrain, priors, chains = chains)
rm(list = ls())
cat("\014")
n <- 15
beta0 <- 0
w <- 0.65
rhoG <- 0.6
rhoL <- 0.3
sig2eps <- 0
muV <- -0.1
sig2V <- 0.01
rhoV <- 0.99
xTrain <- matrix(seq(0, 1, length.out = n), ncol = 1)
noise <- FALSE
G <- getCorMat(xTrain, rhoG)
L <- getCorMat(xTrain, rhoL)
R <- combineCorMats(w, G, L)
K <- sig2V*getCorMat(xTrain, rhoV) + diag(1e-10, length(xTrain))
# V <- exp(MASS::mvrnorm(1, rep(muV, length(xTrain)), K))
V <- rep(1, length(xTrain))
C <- getCovMat(V, R, sig2eps)
yTrain <- MASS::mvrnorm(1, rep(beta0, length(xTrain)), C)
plot(xTrain, yTrain, type = 'l')
chains <- 1
priors <- createPriors(xTrain, noise = noise)
inits <- createInits(xTrain, priors, chains = chains)
rm(list = ls())
cat("\014")
n <- 15
beta0 <- 0
w <- 0.65
rhoG <- 0.6
rhoL <- 0.3
sig2eps <- 0
muV <- -0.1
sig2V <- 0.01
rhoV <- 0.99
xTrain <- matrix(seq(0, 1, length.out = n), ncol = 1)
noise <- FALSE
G <- getCorMat(xTrain, rhoG)
L <- getCorMat(xTrain, rhoL)
R <- combineCorMats(w, G, L)
K <- sig2V*getCorMat(xTrain, rhoV) + diag(1e-10, length(xTrain))
# V <- exp(MASS::mvrnorm(1, rep(muV, length(xTrain)), K))
V <- rep(1, length(xTrain))
C <- getCovMat(V, R, sig2eps)
yTrain <- MASS::mvrnorm(1, rep(beta0, length(xTrain)), C)
plot(xTrain, yTrain, type = 'l')
chains <- 1
priors <- createPriors(xTrain, noise = noise)
inits <- createInits(xTrain, priors, chains = chains)
fit <- bcgp(x = xTrain, y = yTrain, priors = priors,
inits = inits, numUpdates = 5, numAdapt = 500,
burnin = 100, nmcmc = 2000, chains = chains, cores = 1,
noise = noise)
lapply(fit@sim$samples[[1]], mean)
lapply(fit@sim$samples[[1]], mean)
plot(xTrain, colMeans(fit@sim$samples[[1]]$V), type = 'l')
colMeans(fit@sim$samples[[1]]$V)
=======
y <- sin(30*(x - .9)^4)*cos(2*(x - .9)) + (x - .9)/2
return(y)
}
xTrain <- matrix(c(seq(0, .4 + .4/11, by = .4/11), seq(0.5, 1, by = 0.5/3)), ncol = 1)
yTrain <- BJX(xTrain)
xPred <- matrix(sort(c(xTrain, seq(min(xTrain), max(xTrain), 0.005))), ncol = 1)
priors <- createPriors(xTrain, noise = FALSE)
inits <- createInits(xTrain, priors, chains = 1)
bcgp(x = xTrain, y = yTrain, priors = priors,
inits = inits, numUpdates = 3, numAdapt = 1000,
burnin = 1000, nmcmc = 5000, chains = 1, cores = 1,
noise = FALSE)
library(bcgp0a)
rm(list = ls())
cat("\014")
BJX <- function(x){
if(!is.matrix(x)){
stop("x should be a matrix.")
}
if(dim(x)[2] != 1){
stop("x must have exactly one column.")
}
y <- sin(30*(x - .9)^4)*cos(2*(x - .9)) + (x - .9)/2
return(y)
}
xTrain <- matrix(c(seq(0, .4 + .4/11, by = .4/11), seq(0.5, 1, by = 0.5/3)), ncol = 1)
yTrain <- BJX(xTrain)
xPred <- matrix(sort(c(xTrain, seq(min(xTrain), max(xTrain), 0.005))), ncol = 1)
priors <- createPriors(xTrain, noise = FALSE)
inits <- createInits(xTrain, priors, chains = 1)
fit <- bcgp(x = xTrain, y = yTrain, priors = priors,
inits = inits, numUpdates = 3, numAdapt = 1000,
burnin = 1000, nmcmc = 5000, chains = 1, cores = 1,
noise = FALSE)
fit
help("bcgp")
x <- matrix(runif(20, 0, 10), nrow = 10, ncol = 2)
y <- x[, 1] + sin(x[, 2])
priors <- createPriors(x, noise = FALSE)
bcgp(x, y)
blah <-bcgp(x, y)
x
blah$x
y
blah$y
help("scale")
scale(x)
apply(x, 2, scale)
xScaled <- scale(x)
xScaled
attr(x, "scaled:center")
attr(xScaled, "scaled:center")
attr(xScaled, "scaled:center")[1]
help("attributes")
rm(list = ls())
cat("\014")
BJX <- function(x){
if(!is.matrix(x)){
stop("x should be a matrix.")
}
if(dim(x)[2] != 1){
stop("x must have exactly one column.")
}
y <- sin(30*(x - .9)^4)*cos(2*(x - .9)) + (x - .9)/2
return(y)
}
xTrain <- matrix(c(seq(0, .4 + .4/11, by = .4/11), seq(0.5, 1, by = 0.5/3)), ncol = 1)
yTrain <- BJX(xTrain)
xPred <- matrix(sort(c(xTrain, seq(min(xTrain), max(xTrain), 0.005))), ncol = 1)
priors <- createPriors(xTrain, noise = FALSE)
inits <- createInits(xTrain, priors, chains = 1)
fit <- bcgp(x = xTrain, y = yTrain, priors = priors,
inits = inits, numUpdates = 3, numAdapt = 1000,
burnin = 1000, nmcmc = 5000, chains = 1, cores = 1,
noise = FALSE)
fit
apply(xTrain, 2, scale)
scale(xTrain)
library(bcgp0a)
rm(list = ls())
cat("\014")
BJX <- function(x){
if(!is.matrix(x)){
stop("x should be a matrix.")
}
if(dim(x)[2] != 1){
stop("x must have exactly one column.")
}
y <- sin(30*(x - .9)^4)*cos(2*(x - .9)) + (x - .9)/2
return(y)
}
xTrain <- matrix(c(seq(0, .4 + .4/11, by = .4/11), seq(0.5, 1, by = 0.5/3)), ncol = 1)
yTrain <- BJX(xTrain)
xPred <- matrix(sort(c(xTrain, seq(min(xTrain), max(xTrain), 0.005))), ncol = 1)
priors <- createPriors(xTrain, noise = FALSE)
inits <- createInits(xTrain, priors, chains = 1)
fit <- bcgp(x = xTrain, y = yTrain, priors = priors,
inits = inits, numUpdates = 3, numAdapt = 1000,
burnin = 1000, nmcmc = 5000, chains = 1, cores = 1,
noise = FALSE)
fit
x
x
xTrain
x = xTrain
minX <- min(x)
rangeX <- max(x) - minX
scaled <- (x - minX)/rangeX
toReturn <-
structure(scaled, minimum = minX, range = rangeX)
fit
x <- matrix(runif(20, 0, 10), nrow = 10, ncol = 2)
y <- x[, 1] + sin(x[, 2])
priors <- createPriors(x, noise = FALSE)
blah <- bcgp(x, y)
blah$y
blah$x
blah <- bcgp(x, y)
blah$x <- structure(blah$x, minimums = apply(x, 2, min))
blah
help(range)
range(x)
apply(x, 2, range)
blah <- bcgp(x, y)
rangeX <- apply(x, 2, range)
blah$x <- structure(blah$x,
scaled:minimum = rangeX[1,],
scaled:range = rangeX[2,] - rangeX[1,])
blah$x <- structure(blah$x,
'scaled:minimum' = rangeX[1,],
'scaled:range' = rangeX[2,] - rangeX[1,])
blah$x
x
rangeX
is.matrix(blah$x)
is.matrix(blah$y)
is.matrix(1:5)
help(scale)
library(bcgp0a)
rm(list = ls())
cat("\014")
BJX <- function(x){
if(!is.matrix(x)){
stop("x should be a matrix.")
}
if(dim(x)[2] != 1){
stop("x must have exactly one column.")
}
y <- sin(30*(x - .9)^4)*cos(2*(x - .9)) + (x - .9)/2
return(y)
}
xTrain <- matrix(c(seq(0, .4 + .4/11, by = .4/11), seq(0.5, 1, by = 0.5/3)), ncol = 1)
yTrain <- BJX(xTrain)
xPred <- matrix(sort(c(xTrain, seq(min(xTrain), max(xTrain), 0.005))), ncol = 1)
priors <- createPriors(xTrain, noise = FALSE)
inits <- createInits(xTrain, priors, chains = 1)
fit <- bcgp(x = xTrain, y = yTrain, priors = priors,
inits = inits, numUpdates = 3, numAdapt = 1000,
burnin = 1000, nmcmc = 5000, chains = 1, cores = 1,
noise = FALSE)
fit
x <- matrix(runif(20, 0, 10), nrow = 10, ncol = 2)
y <- x[, 1] + sin(x[, 2])
priors <- createPriors(x, noise = FALSE)
blah <- bcgp(x, y)
blah
blah$x
x
help(rescale)
help(scaleX)
library(bcgp0a)
example("bcgp")
library(bcgp0a)
example("bcgp")
x <- matrix(runif(20, 0, 10), nrow = 10, ncol = 2)
y <- x[, 1] + sin(x[, 2])
priors <- createPriors(x, noise = FALSE)
blah <- bcgp(x, y)
rangeX <- apply(x, 2, range)
blah$x <- structure(blah$x,
'scaled:minimum' = rangeX[1,],
'scaled:range' = rangeX[2,] - rangeX[1,])
x <- matrix(runif(20, 0, 10), nrow = 10, ncol = 2)
y <- x[, 1] + sin(x[, 2])
priors <- createPriors(x, noise = FALSE)
x <- matrix(runif(20, 0, 10), nrow = 10, ncol = 2)
y <- x[, 1] + sin(x[, 2])
priors <- createPriors(x, noise = FALSE)
blah <- bcgp(x, y, priors = priors)
blah2 <- bcgp(x, y, priors = "default")
blah3 <- bcgp(x, y, priors = "priors")
blah
blah2
identical(blah, blah2)
library(bcgp0a)
library(bcgp0a)
inits <- createInits(x, priors = priors)
inits
length(inits)
blah <- bcgp(x, y, priors = priors, inits = inits)
inits <- createInits(x, priors = priors)
blah <- bcgp(x, y, priors = priors, inits = inits)
blah2 <- bcgp(x, y, priors = "default", inits = "random")
library(bcgp0a)
x <- matrix(runif(20, 0, 10), nrow = 10, ncol = 2)
y <- x[, 1] + sin(x[, 2])
priors <- createPriors(x, noise = FALSE)
blah <- bcgp(x, y, priors = priors)
blah2 <- bcgp(x, y, priors = "default")
blah3 <- bcgp(x, y, priors = "priors")
inits <- createInits(x, priors = priors)
blah <- bcgp(x, y, priors = priors, inits = inits)
blah2 <- bcgp(x, y, priors = "default", inits = "random")
identical(blah, blah2)
blah3 <- bcgp(x, y, priors = priors, inits = "default")
blah3 <- bcgp(x, y, priors = priors, inits = createInits(x))
blah3 <- bcgp(x, y, priors = priors, inits = createInits(x))
library(bcgp0a)
.libPaths()
library(bcgp0a)
rm(list = ls())
cat("\014")
BJX <- function(x){
if(!is.matrix(x)){
stop("x should be a matrix.")
}
if(dim(x)[2] != 1){
stop("x must have exactly one column.")
}
y <- sin(30*(x - .9)^4)*cos(2*(x - .9)) + (x - .9)/2
return(y)
}
xTrain <- matrix(c(seq(0, .4 + .4/11, by = .4/11), seq(0.5, 1, by = 0.5/3)), ncol = 1)
yTrain <- BJX(xTrain)
xPred <- matrix(sort(c(xTrain, seq(min(xTrain), max(xTrain), 0.005))), ncol = 1)
priors <- createPriors(xTrain, noise = FALSE)
inits <- createInits(xTrain, priors, chains = 1)
fit <- bcgp(x = xTrain, y = yTrain, priors = priors,
inits = inits, numUpdates = 3, numAdapt = 1000,
burnin = 1000, nmcmc = 5000, chains = 1, cores = 1,
noise = FALSE)
fit
>>>>>>> 2abea064fa233b64ec3cd65e96c6826570a7ba93
